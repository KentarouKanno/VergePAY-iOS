//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `Info.plist`.
    static let infoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Info", pathExtension: "plist")
    /// Resource file `Settings.bundle`.
    static let settingsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Settings", pathExtension: "bundle")
    
    /// `bundle.url(forResource: "Info", withExtension: "plist")`
    static func infoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.infoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Settings", withExtension: "bundle")`
    static func settingsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.settingsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 19 images.
  struct image {
    /// Image `CopyDark`.
    static let copyDark = Rswift.ImageResource(bundle: R.hostingBundle, name: "CopyDark")
    /// Image `CopyLight`.
    static let copyLight = Rswift.ImageResource(bundle: R.hostingBundle, name: "CopyLight")
    /// Image `DarkHeart`.
    static let darkHeart = Rswift.ImageResource(bundle: R.hostingBundle, name: "DarkHeart")
    /// Image `LightHeart`.
    static let lightHeart = Rswift.ImageResource(bundle: R.hostingBundle, name: "LightHeart")
    /// Image `NaviClose`.
    static let naviClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "NaviClose")
    /// Image `NaviLogo`.
    static let naviLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "NaviLogo")
    /// Image `QRPlaceholderDark`.
    static let qrPlaceholderDark = Rswift.ImageResource(bundle: R.hostingBundle, name: "QRPlaceholderDark")
    /// Image `QRPlaceholderLight`.
    static let qrPlaceholderLight = Rswift.ImageResource(bundle: R.hostingBundle, name: "QRPlaceholderLight")
    /// Image `QR_Negative`.
    static let qr_Negative = Rswift.ImageResource(bundle: R.hostingBundle, name: "QR_Negative")
    /// Image `QR_Normal`.
    static let qr_Normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "QR_Normal")
    /// Image `QR_Positive`.
    static let qr_Positive = Rswift.ImageResource(bundle: R.hostingBundle, name: "QR_Positive")
    /// Image `UnderTriangle`.
    static let underTriangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "UnderTriangle")
    /// Image `VergePay`.
    static let vergePay = Rswift.ImageResource(bundle: R.hostingBundle, name: "VergePay")
    /// Image `WebBack`.
    static let webBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "WebBack")
    /// Image `WebForward`.
    static let webForward = Rswift.ImageResource(bundle: R.hostingBundle, name: "WebForward")
    /// Image `black`.
    static let black = Rswift.ImageResource(bundle: R.hostingBundle, name: "black")
    /// Image `blueBack`.
    static let blueBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "blueBack")
    /// Image `edit`.
    static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit")
    /// Image `flash`.
    static let flash = Rswift.ImageResource(bundle: R.hostingBundle, name: "flash")
    
    /// `UIImage(named: "CopyDark", bundle: ..., traitCollection: ...)`
    static func copyDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.copyDark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CopyLight", bundle: ..., traitCollection: ...)`
    static func copyLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.copyLight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "DarkHeart", bundle: ..., traitCollection: ...)`
    static func darkHeart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.darkHeart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LightHeart", bundle: ..., traitCollection: ...)`
    static func lightHeart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lightHeart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NaviClose", bundle: ..., traitCollection: ...)`
    static func naviClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.naviClose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NaviLogo", bundle: ..., traitCollection: ...)`
    static func naviLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.naviLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QRPlaceholderDark", bundle: ..., traitCollection: ...)`
    static func qrPlaceholderDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrPlaceholderDark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QRPlaceholderLight", bundle: ..., traitCollection: ...)`
    static func qrPlaceholderLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrPlaceholderLight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QR_Negative", bundle: ..., traitCollection: ...)`
    static func qr_Negative(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qr_Negative, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QR_Normal", bundle: ..., traitCollection: ...)`
    static func qr_Normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qr_Normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QR_Positive", bundle: ..., traitCollection: ...)`
    static func qr_Positive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qr_Positive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "UnderTriangle", bundle: ..., traitCollection: ...)`
    static func underTriangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.underTriangle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "VergePay", bundle: ..., traitCollection: ...)`
    static func vergePay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vergePay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "WebBack", bundle: ..., traitCollection: ...)`
    static func webBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.webBack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "WebForward", bundle: ..., traitCollection: ...)`
    static func webForward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.webForward, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "black", bundle: ..., traitCollection: ...)`
    static func black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "blueBack", bundle: ..., traitCollection: ...)`
    static func blueBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blueBack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "edit", bundle: ..., traitCollection: ...)`
    static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "flash", bundle: ..., traitCollection: ...)`
    static func flash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flash, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 13 nibs.
  struct nib {
    /// Nib `AcountCell`.
    static let acountCell = _R.nib._AcountCell()
    /// Nib `CalculateCell`.
    static let calculateCell = _R.nib._CalculateCell()
    /// Nib `DisplaySwitchCell`.
    static let displaySwitchCell = _R.nib._DisplaySwitchCell()
    /// Nib `FooterCell`.
    static let footerCell = _R.nib._FooterCell()
    /// Nib `MarketCell`.
    static let marketCell = _R.nib._MarketCell()
    /// Nib `NavigationTitleView`.
    static let navigationTitleView = _R.nib._NavigationTitleView()
    /// Nib `PickerCell`.
    static let pickerCell = _R.nib._PickerCell()
    /// Nib `QRDisplayCell`.
    static let qrDisplayCell = _R.nib._QRDisplayCell()
    /// Nib `QRScanCell`.
    static let qrScanCell = _R.nib._QRScanCell()
    /// Nib `SettingHeaderCell`.
    static let settingHeaderCell = _R.nib._SettingHeaderCell()
    /// Nib `SettingSelectCell`.
    static let settingSelectCell = _R.nib._SettingSelectCell()
    /// Nib `TransactionCell`.
    static let transactionCell = _R.nib._TransactionCell()
    /// Nib `TransactionHeaderCell`.
    static let transactionHeaderCell = _R.nib._TransactionHeaderCell()
    
    /// `UINib(name: "AcountCell", in: bundle)`
    static func acountCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.acountCell)
    }
    
    /// `UINib(name: "CalculateCell", in: bundle)`
    static func calculateCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.calculateCell)
    }
    
    /// `UINib(name: "DisplaySwitchCell", in: bundle)`
    static func displaySwitchCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.displaySwitchCell)
    }
    
    /// `UINib(name: "FooterCell", in: bundle)`
    static func footerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.footerCell)
    }
    
    /// `UINib(name: "MarketCell", in: bundle)`
    static func marketCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.marketCell)
    }
    
    /// `UINib(name: "NavigationTitleView", in: bundle)`
    static func navigationTitleView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.navigationTitleView)
    }
    
    /// `UINib(name: "PickerCell", in: bundle)`
    static func pickerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pickerCell)
    }
    
    /// `UINib(name: "QRDisplayCell", in: bundle)`
    static func qrDisplayCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.qrDisplayCell)
    }
    
    /// `UINib(name: "QRScanCell", in: bundle)`
    static func qrScanCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.qrScanCell)
    }
    
    /// `UINib(name: "SettingHeaderCell", in: bundle)`
    static func settingHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingHeaderCell)
    }
    
    /// `UINib(name: "SettingSelectCell", in: bundle)`
    static func settingSelectCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingSelectCell)
    }
    
    /// `UINib(name: "TransactionCell", in: bundle)`
    static func transactionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionCell)
    }
    
    /// `UINib(name: "TransactionHeaderCell", in: bundle)`
    static func transactionHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionHeaderCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 12 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AcountCell`.
    static let acountCell: Rswift.ReuseIdentifier<AcountCell> = Rswift.ReuseIdentifier(identifier: "AcountCell")
    /// Reuse identifier `CalculateCell`.
    static let calculateCell: Rswift.ReuseIdentifier<CalculateCell> = Rswift.ReuseIdentifier(identifier: "CalculateCell")
    /// Reuse identifier `DisplaySwitchCell`.
    static let displaySwitchCell: Rswift.ReuseIdentifier<DisplaySwitchCell> = Rswift.ReuseIdentifier(identifier: "DisplaySwitchCell")
    /// Reuse identifier `FooterCell`.
    static let footerCell: Rswift.ReuseIdentifier<FooterCell> = Rswift.ReuseIdentifier(identifier: "FooterCell")
    /// Reuse identifier `MarketCell`.
    static let marketCell: Rswift.ReuseIdentifier<MarketCell> = Rswift.ReuseIdentifier(identifier: "MarketCell")
    /// Reuse identifier `PickerCell`.
    static let pickerCell: Rswift.ReuseIdentifier<PickerCell> = Rswift.ReuseIdentifier(identifier: "PickerCell")
    /// Reuse identifier `QRDisplayCell`.
    static let qrDisplayCell: Rswift.ReuseIdentifier<QRDisplayCell> = Rswift.ReuseIdentifier(identifier: "QRDisplayCell")
    /// Reuse identifier `QRScanCell`.
    static let qrScanCell: Rswift.ReuseIdentifier<QRScanCell> = Rswift.ReuseIdentifier(identifier: "QRScanCell")
    /// Reuse identifier `SettingHeaderCell`.
    static let settingHeaderCell: Rswift.ReuseIdentifier<SettingHeaderCell> = Rswift.ReuseIdentifier(identifier: "SettingHeaderCell")
    /// Reuse identifier `SettingSelectCell`.
    static let settingSelectCell: Rswift.ReuseIdentifier<SettingSelectCell> = Rswift.ReuseIdentifier(identifier: "SettingSelectCell")
    /// Reuse identifier `TransactionCell`.
    static let transactionCell: Rswift.ReuseIdentifier<TransactionCell> = Rswift.ReuseIdentifier(identifier: "TransactionCell")
    /// Reuse identifier `TransactionHeaderCell`.
    static let transactionHeaderCell: Rswift.ReuseIdentifier<TransactionHeaderCell> = Rswift.ReuseIdentifier(identifier: "TransactionHeaderCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `MainViewController`, and contains static references to 3 segues.
    struct mainViewController {
      /// Segue identifier `toQRScan`.
      static let toQRScan: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "toQRScan")
      /// Segue identifier `toSettings`.
      static let toSettings: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainViewController, SettingsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toSettings")
      /// Segue identifier `toWebView`.
      static let toWebView: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainViewController, WebViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toWebView")
      
      /// Optionally returns a typed version of segue `toQRScan`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toQRScan(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainViewController.toQRScan, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `toSettings`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toSettings(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainViewController, SettingsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainViewController.toSettings, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `toWebView`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toWebView(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainViewController, WebViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainViewController.toWebView, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `QRScan`.
    static let qrScan = _R.storyboard.qrScan()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    /// Storyboard `Splash`.
    static let splash = _R.storyboard.splash()
    /// Storyboard `WebView`.
    static let webView = _R.storyboard.webView()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "QRScan", bundle: ...)`
    static func qrScan(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.qrScan)
    }
    
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    
    /// `UIStoryboard(name: "Splash", bundle: ...)`
    static func splash(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.splash)
    }
    
    /// `UIStoryboard(name: "WebView", bundle: ...)`
    static func webView(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.webView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 35 localization keys.
    struct localizable {
      /// en translation: Access to the camera is not permitted
      /// 
      /// Locales: en, ja
      static let cameraAlertTitle = Rswift.StringResource(key: "CameraAlertTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Access to the photo is not permitted
      /// 
      /// Locales: en, ja
      static let photoAlertTitle = Rswift.StringResource(key: "PhotoAlertTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Account
      /// 
      /// Locales: en, ja
      static let account = Rswift.StringResource(key: "Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Address
      /// 
      /// Locales: en, ja
      static let address = Rswift.StringResource(key: "Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Address copied
      /// 
      /// Locales: en, ja
      static let copyAddressMessage = Rswift.StringResource(key: "Copy Address Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: App Setting
      /// 
      /// Locales: en, ja
      static let appSetting = Rswift.StringResource(key: "AppSetting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Calculate
      /// 
      /// Locales: en, ja
      static let calculate = Rswift.StringResource(key: "Calculate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Camera
      /// 
      /// Locales: en, ja
      static let camera = Rswift.StringResource(key: "Camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, ja
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Close
      /// 
      /// Locales: en, ja
      static let keyboardClose = Rswift.StringResource(key: "Keyboard Close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Color Theme
      /// 
      /// Locales: en, ja
      static let colorTheme = Rswift.StringResource(key: "ColorTheme", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Content could not be obtained
      /// 
      /// Locales: en, ja
      static let noContentsMessage = Rswift.StringResource(key: "NoContentsMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Currency
      /// 
      /// Locales: en, ja
      static let currency = Rswift.StringResource(key: "Currency", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Dark
      /// 
      /// Locales: en, ja
      static let darkTheme = Rswift.StringResource(key: "DarkTheme", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Date / Type / Amount / TX
      /// 
      /// Locales: en, ja
      static let historyHeaderDetailTitle = Rswift.StringResource(key: "History Header Detail Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Display Setting
      /// 
      /// Locales: en, ja
      static let displaySetting = Rswift.StringResource(key: "DisplaySetting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: English
      /// 
      /// Locales: en, ja
      static let defaultLanguage = Rswift.StringResource(key: "DefaultLanguage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: English
      /// 
      /// Locales: en, ja
      static let english = Rswift.StringResource(key: "English", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Failed to load QR code
      /// 
      /// Locales: en, ja
      static let qrReadFailed = Rswift.StringResource(key: "QRReadFailed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: History
      /// 
      /// Locales: en, ja
      static let history = Rswift.StringResource(key: "History", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: In
      /// 
      /// Locales: en, ja
      static let paymentIn = Rswift.StringResource(key: "Payment In", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Japanease
      /// 
      /// Locales: en, ja
      static let japanease = Rswift.StringResource(key: "Japanease", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Language
      /// 
      /// Locales: en, ja
      static let language = Rswift.StringResource(key: "Language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Light
      /// 
      /// Locales: en, ja
      static let lightTheme = Rswift.StringResource(key: "LightTheme", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Market
      /// 
      /// Locales: en, ja
      static let market = Rswift.StringResource(key: "Market", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: None
      /// 
      /// Locales: en, ja
      static let historyNone = Rswift.StringResource(key: "History None", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Out
      /// 
      /// Locales: en, ja
      static let paymentOut = Rswift.StringResource(key: "Payment Out", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Photo
      /// 
      /// Locales: en, ja
      static let photo = Rswift.StringResource(key: "Photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Please enter the amount to be remitted
      /// 
      /// Locales: en, ja
      static let payTextFieldPlaceholder = Rswift.StringResource(key: "PayTextFieldPlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Please go to the setting screen and approve access to the camera.
      /// 
      /// Locales: en, ja
      static let cameraAlertMessage = Rswift.StringResource(key: "CameraAlertMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Please go to the setting screen and approve access to the photo.
      /// 
      /// Locales: en, ja
      static let photoAlertMessage = Rswift.StringResource(key: "PhotoAlertMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: QR Code
      /// 
      /// Locales: en, ja
      static let qrCode = Rswift.StringResource(key: "QR Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Send XVG : 
      /// 
      /// Locales: en, ja
      static let sendXVG = Rswift.StringResource(key: "Send XVG", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Setting
      /// 
      /// Locales: en, ja
      static let toSettings = Rswift.StringResource(key: "toSettings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: XVG Address
      /// 
      /// Locales: en, ja
      static let xvgAddress = Rswift.StringResource(key: "XVG Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      
      /// en translation: Access to the camera is not permitted
      /// 
      /// Locales: en, ja
      static func cameraAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("CameraAlertTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Access to the photo is not permitted
      /// 
      /// Locales: en, ja
      static func photoAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("PhotoAlertTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Account
      /// 
      /// Locales: en, ja
      static func account(_: Void = ()) -> String {
        return NSLocalizedString("Account", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Address
      /// 
      /// Locales: en, ja
      static func address(_: Void = ()) -> String {
        return NSLocalizedString("Address", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Address copied
      /// 
      /// Locales: en, ja
      static func copyAddressMessage(_: Void = ()) -> String {
        return NSLocalizedString("Copy Address Message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: App Setting
      /// 
      /// Locales: en, ja
      static func appSetting(_: Void = ()) -> String {
        return NSLocalizedString("AppSetting", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Calculate
      /// 
      /// Locales: en, ja
      static func calculate(_: Void = ()) -> String {
        return NSLocalizedString("Calculate", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Camera
      /// 
      /// Locales: en, ja
      static func camera(_: Void = ()) -> String {
        return NSLocalizedString("Camera", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, ja
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("Cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Close
      /// 
      /// Locales: en, ja
      static func keyboardClose(_: Void = ()) -> String {
        return NSLocalizedString("Keyboard Close", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Color Theme
      /// 
      /// Locales: en, ja
      static func colorTheme(_: Void = ()) -> String {
        return NSLocalizedString("ColorTheme", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Content could not be obtained
      /// 
      /// Locales: en, ja
      static func noContentsMessage(_: Void = ()) -> String {
        return NSLocalizedString("NoContentsMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Currency
      /// 
      /// Locales: en, ja
      static func currency(_: Void = ()) -> String {
        return NSLocalizedString("Currency", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Dark
      /// 
      /// Locales: en, ja
      static func darkTheme(_: Void = ()) -> String {
        return NSLocalizedString("DarkTheme", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Date / Type / Amount / TX
      /// 
      /// Locales: en, ja
      static func historyHeaderDetailTitle(_: Void = ()) -> String {
        return NSLocalizedString("History Header Detail Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Display Setting
      /// 
      /// Locales: en, ja
      static func displaySetting(_: Void = ()) -> String {
        return NSLocalizedString("DisplaySetting", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: English
      /// 
      /// Locales: en, ja
      static func defaultLanguage(_: Void = ()) -> String {
        return NSLocalizedString("DefaultLanguage", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: English
      /// 
      /// Locales: en, ja
      static func english(_: Void = ()) -> String {
        return NSLocalizedString("English", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Failed to load QR code
      /// 
      /// Locales: en, ja
      static func qrReadFailed(_: Void = ()) -> String {
        return NSLocalizedString("QRReadFailed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: History
      /// 
      /// Locales: en, ja
      static func history(_: Void = ()) -> String {
        return NSLocalizedString("History", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: In
      /// 
      /// Locales: en, ja
      static func paymentIn(_: Void = ()) -> String {
        return NSLocalizedString("Payment In", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Japanease
      /// 
      /// Locales: en, ja
      static func japanease(_: Void = ()) -> String {
        return NSLocalizedString("Japanease", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Language
      /// 
      /// Locales: en, ja
      static func language(_: Void = ()) -> String {
        return NSLocalizedString("Language", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Light
      /// 
      /// Locales: en, ja
      static func lightTheme(_: Void = ()) -> String {
        return NSLocalizedString("LightTheme", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Market
      /// 
      /// Locales: en, ja
      static func market(_: Void = ()) -> String {
        return NSLocalizedString("Market", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: None
      /// 
      /// Locales: en, ja
      static func historyNone(_: Void = ()) -> String {
        return NSLocalizedString("History None", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Out
      /// 
      /// Locales: en, ja
      static func paymentOut(_: Void = ()) -> String {
        return NSLocalizedString("Payment Out", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Photo
      /// 
      /// Locales: en, ja
      static func photo(_: Void = ()) -> String {
        return NSLocalizedString("Photo", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please enter the amount to be remitted
      /// 
      /// Locales: en, ja
      static func payTextFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("PayTextFieldPlaceholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please go to the setting screen and approve access to the camera.
      /// 
      /// Locales: en, ja
      static func cameraAlertMessage(_: Void = ()) -> String {
        return NSLocalizedString("CameraAlertMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please go to the setting screen and approve access to the photo.
      /// 
      /// Locales: en, ja
      static func photoAlertMessage(_: Void = ()) -> String {
        return NSLocalizedString("PhotoAlertMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: QR Code
      /// 
      /// Locales: en, ja
      static func qrCode(_: Void = ()) -> String {
        return NSLocalizedString("QR Code", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send XVG : 
      /// 
      /// Locales: en, ja
      static func sendXVG(_: Void = ()) -> String {
        return NSLocalizedString("Send XVG", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Setting
      /// 
      /// Locales: en, ja
      static func toSettings(_: Void = ()) -> String {
        return NSLocalizedString("toSettings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: XVG Address
      /// 
      /// Locales: en, ja
      static func xvgAddress(_: Void = ()) -> String {
        return NSLocalizedString("XVG Address", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _SettingSelectCell.validate()
      try _AcountCell.validate()
      try _QRDisplayCell.validate()
      try _QRScanCell.validate()
      try _MarketCell.validate()
      try _NavigationTitleView.validate()
    }
    
    struct _AcountCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AcountCell
      
      let bundle = R.hostingBundle
      let identifier = "AcountCell"
      let name = "AcountCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AcountCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AcountCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "CopyLight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CopyLight' is used in nib 'AcountCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CalculateCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CalculateCell
      
      let bundle = R.hostingBundle
      let identifier = "CalculateCell"
      let name = "CalculateCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CalculateCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CalculateCell
      }
      
      fileprivate init() {}
    }
    
    struct _DisplaySwitchCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DisplaySwitchCell
      
      let bundle = R.hostingBundle
      let identifier = "DisplaySwitchCell"
      let name = "DisplaySwitchCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DisplaySwitchCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DisplaySwitchCell
      }
      
      fileprivate init() {}
    }
    
    struct _FooterCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = FooterCell
      
      let bundle = R.hostingBundle
      let identifier = "FooterCell"
      let name = "FooterCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FooterCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FooterCell
      }
      
      fileprivate init() {}
    }
    
    struct _MarketCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MarketCell
      
      let bundle = R.hostingBundle
      let identifier = "MarketCell"
      let name = "MarketCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MarketCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MarketCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "LightHeart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LightHeart' is used in nib 'MarketCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _NavigationTitleView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NavigationTitleView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "NaviLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NaviLogo' is used in nib 'NavigationTitleView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PickerCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PickerCell
      
      let bundle = R.hostingBundle
      let identifier = "PickerCell"
      let name = "PickerCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PickerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PickerCell
      }
      
      fileprivate init() {}
    }
    
    struct _QRDisplayCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = QRDisplayCell
      
      let bundle = R.hostingBundle
      let identifier = "QRDisplayCell"
      let name = "QRDisplayCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> QRDisplayCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QRDisplayCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "QRPlaceholderLight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'QRPlaceholderLight' is used in nib 'QRDisplayCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _QRScanCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = QRScanCell
      
      let bundle = R.hostingBundle
      let identifier = "QRScanCell"
      let name = "QRScanCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> QRScanCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QRScanCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "blueBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'blueBack' is used in nib 'QRScanCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SettingHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SettingHeaderCell
      
      let bundle = R.hostingBundle
      let identifier = "SettingHeaderCell"
      let name = "SettingHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SettingHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingHeaderCell
      }
      
      fileprivate init() {}
    }
    
    struct _SettingSelectCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SettingSelectCell
      
      let bundle = R.hostingBundle
      let identifier = "SettingSelectCell"
      let name = "SettingSelectCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SettingSelectCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingSelectCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "UnderTriangle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'UnderTriangle' is used in nib 'SettingSelectCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _TransactionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TransactionCell
      
      let bundle = R.hostingBundle
      let identifier = "TransactionCell"
      let name = "TransactionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TransactionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionCell
      }
      
      fileprivate init() {}
    }
    
    struct _TransactionHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TransactionHeaderCell
      
      let bundle = R.hostingBundle
      let identifier = "TransactionHeaderCell"
      let name = "TransactionHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TransactionHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionHeaderCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try launchScreen.validate()
      try splash.validate()
      try qrScan.validate()
      try webView.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "VergePay") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'VergePay' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if UIKit.UIImage(named: "edit") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit' is used in storyboard 'Main', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct qrScan: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "QRScan"
      
      static func validate() throws {
        if UIKit.UIImage(named: "flash") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'flash' is used in storyboard 'QRScan', but couldn't be loaded.") }
        if UIKit.UIImage(named: "NaviClose") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NaviClose' is used in storyboard 'QRScan', but couldn't be loaded.") }
        if UIKit.UIImage(named: "QR_Normal") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'QR_Normal' is used in storyboard 'QRScan', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct settings: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = SettingsViewController
      
      let bundle = R.hostingBundle
      let name = "Settings"
      
      fileprivate init() {}
    }
    
    struct splash: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SplashViewController
      
      let bundle = R.hostingBundle
      let name = "Splash"
      
      static func validate() throws {
        if UIKit.UIImage(named: "VergePay") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'VergePay' is used in storyboard 'Splash', but couldn't be loaded.") }
        if UIKit.UIImage(named: "black") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'black' is used in storyboard 'Splash', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct webView: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = WebViewController
      
      let bundle = R.hostingBundle
      let name = "WebView"
      
      static func validate() throws {
        if UIKit.UIImage(named: "WebForward") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'WebForward' is used in storyboard 'WebView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "WebBack") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'WebBack' is used in storyboard 'WebView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
